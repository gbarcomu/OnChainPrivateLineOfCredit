/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { Bank } from "../Bank";

export class Bank__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    USDFooAddress: string,
    turboVerifierAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Bank> {
    return super.deploy(
      USDFooAddress,
      turboVerifierAddress,
      overrides || {}
    ) as Promise<Bank>;
  }
  getDeployTransaction(
    USDFooAddress: string,
    turboVerifierAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      USDFooAddress,
      turboVerifierAddress,
      overrides || {}
    );
  }
  attach(address: string): Bank {
    return super.attach(address) as Bank;
  }
  connect(signer: Signer): Bank__factory {
    return super.connect(signer) as Bank__factory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Bank {
    return new Contract(address, _abi, signerOrProvider) as Bank;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "USDFooAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "turboVerifierAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "lineSuccessfullyCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tokensSuccessfullyCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "userId",
        type: "uint256",
      },
    ],
    name: "getLineOfCredit",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "userId",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_maximumAllowanceHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_disposedAmountHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_interestRateHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_accruedInterestsHash",
        type: "bytes32",
      },
    ],
    name: "openLineOfCredit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "verifyProof",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "withdrawWithProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516105b13803806105b183398101604081905261002f916100e5565b600180546001600160a01b0319166001600160a01b03841690811790915560405163140e25ad60e31b8152655af3107a4000600482015263a0712d6890602401600060405180830381600087803b15801561008957600080fd5b505af115801561009d573d6000803e3d6000fd5b5050600280546001600160a01b0319166001600160a01b03949094169390931790925550610118915050565b80516001600160a01b03811681146100e057600080fd5b919050565b600080604083850312156100f857600080fd5b610101836100c9565b915061010f602084016100c9565b90509250929050565b61048a806101276000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806355c265fe14610051578063ad5cf40d14610066578063e1a58d5114610079578063fcfe38ac146100a1575b600080fd5b61006461005f366004610318565b610117565b005b61006461007436600461038a565b6101ed565b61008c610087366004610318565b610272565b60405190151581526020015b60405180910390f35b6100f76100af3660046103c5565b60009081526020818152604091829020825160808101845281548082526001830154938201849052600283015494820185905260039092015460609091018190529093919291565b604080519485526020850193909352918301526060820152608001610098565b6001546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526103e8602482015273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb906044016020604051808303816000875af115801561018f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b391906103de565b506040516103e881527f9426c9994b0b96a4028e9df64b0a71825dac5f24c7e7de3612516893a23f14379060200160405180910390a15050565b6040805160808101825285815260208082018681528284018681526060840186815260008b815280855286902094518555915160018086019190915590516002850155905160039093019290925591519081527f5e4d03a69cf1c50a722b7d5e89bedbfe6be5b7f382128a0034c622fb2aff3b54910160405180910390a15050505050565b6002546040517f8e760afe000000000000000000000000000000000000000000000000000000008152600091829173ffffffffffffffffffffffffffffffffffffffff90911690638e760afe906102cf9087908790600401610407565b602060405180830381865afa1580156102ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031091906103de565b949350505050565b6000806020838503121561032b57600080fd5b823567ffffffffffffffff8082111561034357600080fd5b818501915085601f83011261035757600080fd5b81358181111561036657600080fd5b86602082850101111561037857600080fd5b60209290920196919550909350505050565b600080600080600060a086880312156103a257600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000602082840312156103d757600080fd5b5035919050565b6000602082840312156103f057600080fd5b8151801515811461040057600080fd5b9392505050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010191905056fea2646970667358221220ae76c6d30c200e425288e00a8bfcfd13205e8824568c24b60dd9c5a5d61a881964736f6c634300080a0033";
